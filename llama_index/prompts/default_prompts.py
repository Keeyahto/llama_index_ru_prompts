"""Set of default prompts."""

from llama_index.prompts.base import Prompt
from llama_index.prompts.prompt_type import PromptType

############################################
# Tree
############################################


DEFAULT_SUMMARY_PROMPT_TMPL = (
    "Напиши резюме следующего текста. Попробуй использовать только "
    "предоставленную информацию. "
    "Постарайтесь включить как можно больше ключевых деталей.\n"
    "\n"
    "\n"
    "{context_str}\n"
    "\n"
    "\n"
    'РЕЗЮМЕ:"""\n'
)

DEFAULT_SUMMARY_PROMPT = Prompt(
    DEFAULT_SUMMARY_PROMPT_TMPL, prompt_type=PromptType.SUMMARY
)

DEFAULT_INSERT_PROMPT_TMPL = (
    "Информация о контексте приведена ниже. Она представлена в виде нумерованного списка "
    "(от 1 до {num_chunks}),"
    "где каждый элемент списка соответствует резюме.\n"
    "---------------------\n"
    "{context_list}"
    "---------------------\n"
    "Исходя из информации о контексте, вот новый фрагмент "
    "информации: {new_chunk_text}\n"
    "Ответь номером, соответствующим резюме, которое необходимо обновить. "
    "Ответ должен быть номером резюме, наиболее соответствующего вопросу.\n"
)

DEFAULT_INSERT_PROMPT = Prompt(
    DEFAULT_INSERT_PROMPT_TMPL, prompt_type=PromptType.TREE_INSERT
)

# # single choice
DEFAULT_QUERY_PROMPT_TMPL = (
    "Ниже представлены некоторые варианты. Они представлены в виде нумерованного списка "
    "(от 1 до {num_chunks}),"
    "где каждый элемент списка соответствует резюме.\n"
    "---------------------\n"
    "{context_list}"
    "\n---------------------\n"
    "Используя только предоставленные варианты и не используя предыдущие знания, выбери "
    "вариант, наиболее соответствующий вопросу: '{query_str}'\n"
    "Укажи выбор в следующем формате: 'ОТВЕТ: <номер>' и объясни, почему "
    "это резюме было выбрано относительно вопроса.\n"
)

DEFAULT_QUERY_PROMPT = Prompt(
    DEFAULT_QUERY_PROMPT_TMPL, prompt_type=PromptType.TREE_SELECT
)

# multiple choice
DEFAULT_QUERY_PROMPT_MULTIPLE_TMPL = (
    "Ниже представлены некоторые варианты. Они представлены в виде нумерованного "
    "списка (от 1 до {num_chunks}), "
    "где каждый элемент списка соответствует резюме.\n"
    "---------------------\n"
    "{context_list}"
    "\n---------------------\n"
    "Используя только предоставленные варианты и не используя предыдущие знания, выбери "
    "лучшие варианты (не более {branching_factor}), ранжированные от наиболее соответствующих "
    "до наименее соответствующих) вопросу: '{query_str}'\n"
    "Укажи выбор в следующем формате: 'ОТВЕТ: <номера>' и объясни, почему "
    "эти резюме были выбраны относительно вопроса.\n"
)

DEFAULT_QUERY_PROMPT_MULTIPLE = Prompt(
    DEFAULT_QUERY_PROMPT_MULTIPLE_TMPL, prompt_type=PromptType.TREE_SELECT_MULTIPLE
)

DEFAULT_REFINE_PROMPT_TMPL = (
    "Оригинальный вопрос следующий: {query_str}\n"
    "Мы предоставили существующий ответ: {existing_answer}\n"
    "У нас есть возможность уточнить существующий ответ "
    "(только если это необходимо) с помощью дополнительного контекста ниже.\n"
    "------------\n"
    "{context_msg}\n"
    "------------\n"
    "Исходя из нового контекста, уточни оригинальный ответ, чтобы лучше "
    "ответить на вопрос. "
    "Если контекст не полезен, верните оригинальный ответ."
)

DEFAULT_REFINE_PROMPT = Prompt(
    DEFAULT_REFINE_PROMPT_TMPL, prompt_type=PromptType.REFINE
)

DEFAULT_TEXT_QA_PROMPT_TMPL = (
    "Информация о контексте представлена ниже.\n"
    "---------------------\n"
    "{context_str}\n"
    "---------------------\n"
    "Исходя из информации о контексте и без использования предыдущих знаний, "
    "ответь на вопрос: {query_str}\n"
)

DEFAULT_TEXT_QA_PROMPT = Prompt(
    DEFAULT_TEXT_QA_PROMPT_TMPL, prompt_type=PromptType.QUESTION_ANSWER
)

############################################
# Keyword Table
############################################

DEFAULT_KEYWORD_EXTRACT_TEMPLATE_TMPL = (
    "Ниже представлен некоторый текст. Исходя из текста, извлеки до {max_keywords} "
    "ключевых слов из текста. Избегай стоп-слов."
    "---------------------\n"
    "{text}\n"
    "---------------------\n"
    "Укажи ключевые слова в следующем формате через запятую: 'КЛЮЧЕВЫЕ_СЛОВА: <ключевые_слова>'\n"
)
DEFAULT_KEYWORD_EXTRACT_TEMPLATE = Prompt(
    DEFAULT_KEYWORD_EXTRACT_TEMPLATE_TMPL, prompt_type=PromptType.KEYWORD_EXTRACT
)

DEFAULT_QUERY_KEYWORD_EXTRACT_TEMPLATE_TMPL = (
    "Ниже представлен вопрос. Исходя из вопроса, извлеки до {max_keywords} "
    "ключевых слов из текста. Сфокусируйся на извлечении ключевых слов, которые мы можем использовать "
    "для нахождения наилучших ответов на вопрос. Избегай стоп-слов.\n"
    "---------------------\n"
    "{question}\n"
    "---------------------\n"
    "Укажи ключевые слова в следующем формате через запятую: 'КЛЮЧЕВЫЕ_СЛОВА: <ключевые_слова>'\n"
)

DEFAULT_QUERY_KEYWORD_EXTRACT_TEMPLATE = Prompt(
    DEFAULT_QUERY_KEYWORD_EXTRACT_TEMPLATE_TMPL,
    prompt_type=PromptType.QUERY_KEYWORD_EXTRACT,
)

############################################
# Structured Store
############################################

DEFAULT_SCHEMA_EXTRACT_TMPL = (
    "Мы хотим извлечь соответствующие поля из неструктурированного текстового фрагмента "
    "в структурированную схему. Сначала мы предоставляем неструктурированный текст, а затем "
    "мы предоставляем схему, которую мы хотим извлечь. "
    "-----------текст-----------\n"
    "{text}\n"
    "-----------схема-----------\n"
    "{schema}\n"
    "---------------------\n"
    "Исходя из текста и схемы, извлеки соответствующие поля из текста в "
    "следующем формате: "
    "поле1: <значение>\nполе2: <значение>\n...\n\n"
    "Если поле отсутствует в тексте, не включай его в вывод."
    "Если в тексте нет полей, верни пустую строку.\n"
    "Поля: "
)

DEFAULT_SCHEMA_EXTRACT_PROMPT = Prompt(
    DEFAULT_SCHEMA_EXTRACT_TMPL, prompt_type=PromptType.SCHEMA_EXTRACT
)

# NOTE: taken from langchain and adapted
# https://tinyurl.com/b772sd77
DEFAULT_TEXT_TO_SQL_TMPL = (
    "Исходя из входного вопроса, сначала создайте синтаксически корректный запрос {dialect} "
    "для выполнения, затем просмотрите результаты запроса и верните ответ. "
    "Вы можете упорядочить результаты по соответствующему столбцу, чтобы вернуть "
    "наиболее интересные примеры в базе данных.\n"
    "Никогда не запрашивайте все столбцы из конкретной таблицы, запросите только "
    "несколько соответствующих столбцов, исходя из вопроса.\n"
    "Обратите внимание на использование только имен столбцов, которые вы видите в описании схемы. "
    "Будьте внимательны и не запрашивайте столбцы, которых не существует. "
    "Обратите внимание на то, какой столбец находится в какой таблице. "
    "Кроме того, при необходимости уточняй имена столбцов с именем таблицы.\n"
    "Используйте следующий формат:\n"
    "Вопрос: Вопрос здесь\n"
    "SQLЗапрос: Запрос SQL для выполнения\n"
    "SQLРезультат: Результат SQLЗапроса\n"
    "Ответ: Окончательный ответ здесь\n"
    "Используйте только перечисленные ниже таблицы.\n"
    "{schema}\n"
    "Вопрос: {query_str}\n"
    "SQLЗапрос: "
)

DEFAULT_TEXT_TO_SQL_PROMPT = Prompt(
    DEFAULT_TEXT_TO_SQL_TMPL,
    stop_token="\nSQLResult:",
    prompt_type=PromptType.TEXT_TO_SQL,
)

# NOTE: by partially filling schema, we can reduce to a QuestionAnswer prompt
# that we can feed to ur table
DEFAULT_TABLE_CONTEXT_TMPL = (
    "Мы предоставили схему таблицы ниже. "
    "---------------------\n"
    "{schema}\n"
    "---------------------\n"
    "Мы также предоставили информацию о контексте ниже. "
    "{context_str}\n"
    "---------------------\n"
    "Исходя из информации о контексте и схемы таблицы, "
    "дай ответ на следующую задачу: {query_str}"
)

DEFAULT_TABLE_CONTEXT_QUERY = (
    "Предоставьте общее описание таблицы, "
    "а также описание каждого столбца в таблице. "
    "Укажите ответы в следующем формате:\n"
    "ОписаниеТаблицы: <описание>\n"
    "ОписаниеСтолбца1: <описание>\n"
    "ОписаниеСтолбца2: <описание>\n"
    "...\n\n"
)

DEFAULT_TABLE_CONTEXT_PROMPT = Prompt(
    DEFAULT_TABLE_CONTEXT_TMPL, prompt_type=PromptType.TABLE_CONTEXT
)

# NOTE: by partially filling schema, we can reduce to a RefinePrompt
# that we can feed to ur table
DEFAULT_REFINE_TABLE_CONTEXT_TMPL = (
    "Мы предоставили схему таблицы ниже. "
    "---------------------\n"
    "{schema}\n"
    "---------------------\n"
    "Мы также предоставили некоторую информацию о контексте ниже. "
    "{context_msg}\n"
    "---------------------\n"
    "Исходя из информации о контексте и схемы таблицы, "
    "дайте ответ на следующую задачу: {query_str}\n"
    "Мы предоставили существующий ответ: {existing_answer}\n"
    "Исходя из нового контекста, уточни исходный ответ, чтобы лучше "
    "ответить на вопрос. "
    "Если контекст не является полезным, верни исходный ответ."
)
DEFAULT_REFINE_TABLE_CONTEXT_PROMPT = Prompt(
    DEFAULT_REFINE_TABLE_CONTEXT_TMPL, prompt_type=PromptType.TABLE_CONTEXT
)

############################################
# Knowledge-Graph Table
############################################

DEFAULT_KG_TRIPLET_EXTRACT_TMPL = (
    "Извлеки до {max_knowledge_triplets} триплетов знаний из предоставленного текста, используя формат (субъект, предикат, объект), и исключите стоп-слова.\n"
    "---------------------\n"
    "Примеры:\n"
    "Текст: Алиса - мать Боба.\n"
    "Триплеты:\n"
    "(Алиса, является матерью, Боб)\n"
    "Текст: Philz - кофейня, основанная в Беркли в 1982 году.\n"
    "Триплеты:\n"
    "(Philz, является, кофейня)\n"
    "(Philz, основана в, Беркли)\n"
    "(Philz, основана в, 1982 год)\n"
    "Текст: Генетическая модификация организмов может иметь противоречивые последствия для экосистемы.\n"
    "Триплеты:\n"
    "(Генетическая модификация, может иметь, последствия)\n"
    "(Генетическая модификация, имеет влияние, экосистема)\n"
    "(Противоречивые последствия, могут быть, для экосистемы)\n"
    "(Противоречивые последствия, могут возникнуть, генетическая модификация организмов)\n"
    "Последствия для экосистемы, могут возникнуть, генетическая модификация организмов\n"
    "---------------------\n"
    "Текст: {text}\n"
    "Триплеты:\n"
)
DEFAULT_KG_TRIPLET_EXTRACT_PROMPT = Prompt(
    DEFAULT_KG_TRIPLET_EXTRACT_TMPL, prompt_type=PromptType.KNOWLEDGE_TRIPLET_EXTRACT
)

############################################
# HYDE
##############################################

HYDE_TMPL = (
    "Пожалуйста, напиши отрывок, чтобы ответить на вопрос\n"
    "Включи как можно больше ключевых деталей.\n"
    "\n"
    "\n"
    "{context_str}\n"
    "\n"
    "\n"
    'Отрывок:"""\n'
)

DEFAULT_HYDE_PROMPT = Prompt(HYDE_TMPL, prompt_type=PromptType.SUMMARY)

############################################
# Simple Input
############################################

DEFAULT_SIMPLE_INPUT_TMPL = "{query_str}"
DEFAULT_SIMPLE_INPUT_PROMPT = Prompt(
    DEFAULT_SIMPLE_INPUT_TMPL, prompt_type=PromptType.SIMPLE_INPUT
)

############################################
# Pandas
############################################

DEFAULT_PANDAS_TMPL = (
    "Ты работаешь с объектом DataFrame в библиотеке pandas для Python.\n"
    "Название DataFrame - df.\n"
    "Это результат выполнения print(df.head()):\n"
    "{df_str}\n\n"
    "Вот входной запрос: {query_str}.\n"
    "Исходя из информации в df и входного запроса, пожалуйста, выполни "
    "следующие инструкции:\n"
    "{instruction_str}"
    "Вывод:\n"
)

DEFAULT_PANDAS_PROMPT = Prompt(DEFAULT_PANDAS_TMPL, prompt_type=PromptType.PANDAS)

############################################
# JSON Path
############################################

DEFAULT_JSON_PATH_TMPL = (
    "Мы предоставляем JSON-схему ниже:\n"
    "{schema}\n"
    "При выполнении задания, укажи запрос JSON Path, который "
    "может извлечь данные из JSON-значения, соответствующего схеме.\n"
    "Задание: {query_str}\n"
    "JSONPath: "
)

DEFAULT_JSON_PATH_PROMPT = Prompt(
    DEFAULT_JSON_PATH_TMPL, prompt_type=PromptType.JSON_PATH
)
